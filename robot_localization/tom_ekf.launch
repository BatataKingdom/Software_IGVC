<launch>

	<!-- 	This node will take in measurements from odometry, IMU, stamped pose, and stamped twist messages. It tracks
		the state of the robot, with the state vector being defined as X position, Y position, Z position,
		roll, pitch, yaw, and the respective velocites for those quantities. Accelerations are not used (yet).
		Units for all measurements are assumed to be in meters and radians. By default, the node outputs an
		Odometry message with the topic name odometry/filtered -->

    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization" clear_params="true">
		<param name="frequency" value="30"/>  
		<param name="sensor_timeout" value="0.2"/>


		<!-- The filter accepts an arbitrary number of inputs from each input message type (Odometry, PoseStamped,
		     TwistStamped, Imu). To add a new one, simply append the next number in the sequence to its base name,
		     e.g., odom0, odom1, twist0, twist1, imu0, imu1, imu2, etc. The value should be the topic name. -->
		
		<param name= "odom0" value= "/raw_odom" />
		<param name= "odom1" value= "/vo" />

		<!-- Each sensor reading updates some or all of the filter's state. These options give you greater control over
		     which values from each measurement are fed to the filter. For example, if you have an odometry message as input,
		     but only want to use its Z position value, then set the entire vector to false, except for the third entry.
		     The order of the values is x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw. Note that not some message
		     types lack certain variables. For example, a TwistWithCovarianceStamped message has no pose information, so the first
		     six values would be meaningless in that case. -->

      					   <!--  x      y      z  
						roll  pitch  yaw   
						vx      vy    vz   
						vroll vpitch vyaw -->

		<rosparam param="odom0_config">[false, false, true, true, true, false, true, true, true, true, true, true]</rosparam>

    		<rosparam param="odom1_config">[true, true, true, false, false, false, false, false, false, false, false, false]</rosparam>

		<!-- The best practice for including new sensors in ekf_localization_node is to pass in velocity measurements and let
		     ekf_localization_node integrate them. However, this isn't always feasible, and so ekf_localization (and the other
		     nodes in robot_localization) support fusion of absolute measurements. If you have more than one sensor providing
		     absolute measurements, however, you will quickly run into problems, as the sensors will inevitably diverge from
		     one another, causing the filter to jump back and forth rapidly. To combat this situation, you can set the sensor's
		     differential parameter to true. This will carry out differential integration of the sensor data, i.e., it will
		     repeatedly integrate the difference between a given measurement and the previous measurement from that sensor.
		     NOTE: this only applies to sensors that provide absolute measurements, so Twist messages are not supported. -->
      		
		<param name="odom0_differential" value="false"/>
    		<param name="odom1_differential" value="false"/>

		<!-- Debug settings. Not for the faint of heart. Outputs a ludicrous amount of information to the file
		     specified by debug_out_file. I hope you like matrices! -->
      		
		<param name="debug" value="true"/>
    		<param name="debug_out_file" value="debug_ekf_localization.txt"/>

		<!-- For the tf tree, this specifies the name of the local (odom) and vehicle (base_link) frames. There's
		     a good chance you can leave these alone, as the default values adhere to the ROS spec. -->
      
		<param name= "odom_frame" 	value= "odom"/>
     		<param name= "base_link_frame" 	value= "base_footprint"/>

		<!-- The process noise covariance matrix can be difficult to tune, and can vary for each application, so it
		     is exposed as a configuration parameter. PLEASE NOTE that every value in this matrix *must* be specified
		     as real-valued, i.e., it must have a decimal point. Integers don't load correctly. The values are ordered
		     as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw. -->

		<rosparam param="process_noise_covariance">[0.025, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                                  0.0, 0.025, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                                  0.0, 0.0, 0.01, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                                  0.0, 0.0, 0.0, 0.025, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                                  0.0, 0.0, 0.0, 0.0, 0.025, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                                  0.0, 0.0, 0.0, 0.0, 0.00, 0.07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                                  0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.04, 0.0, 0.0, 0.0, 0.0, 0.0,
                                                  0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.0, 0.025, 0.0, 0.0, 0.0, 0.0,
                                                  0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.0, 0.0, 0.025, 0.0, 0.0, 0.0,
                                                  0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.0, 0.0, 0.0, 0.002, 0.0, 0.0,
                                                  0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002, 0.0,
                                                  0.0, 0.0, 0.0, 0.0, 0.00, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04]</rosparam>		

    </node>
		
</launch>

