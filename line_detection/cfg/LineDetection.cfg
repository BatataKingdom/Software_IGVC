#!/usr/bin/env python
PACKAGE = "line_detection"

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator
from dynamic_reconfigure.parameter_generator_catkin import int_t
from dynamic_reconfigure.parameter_generator_catkin import double_t
from dynamic_reconfigure.parameter_generator_catkin import str_t
#from dynamic_reconfigure.parameter_generator_catkin import bool_t

gen = ParameterGenerator()

gen.add("global_threshold", int_t, 0, "Global Threshold filter applied to\
        image.", 160, 0, 255)
gen.add("global_threshold_factor", double_t, 0, "Factor used in normalizing\
        with Global Threshold", 2.0, 0.0, 10.0)
gen.add("adaptive_threshold_block_size", int_t, 0, "Block Size used in\
        adaptive threshold (must be odd)", 191, 1, 555)
gen.add("adaptive_threshold_C", int_t, 0, "Constant value used in adaptive \
        threshold (can be negative)", 30, -30, 50)
gen.add("blur_size", int_t, 0, "Size of block to apply gaussian blur over \
        (must be odd)", 49, 1, 101)
gen.add("canny_threshold", int_t, 0, "Threshold used for canny edge \
        detection", 100, 5, 255)
gen.add("max_erode_iterations", int_t, 0, "Maximum number of iterations to \
        perform skeletonizing on", 100, 1, 1000)
gen.add("bandpass_low_cutoff", int_t, 0, "Low cutoff for bandpass \
        filter", 1, 1, 200)
gen.add("bandpass_high_cutoff", int_t, 0, "High cutoff for bandpass filter",
        30, 1, 200)
gen.add("hue_low", int_t, 0, "Lower limit for hue selection in backprojection \
        filter (H channel in HSV format)", 20, 0, 255)
gen.add("hue_high", int_t, 0, "Upper limit for hue selection in backprojection\
        filter (H channel in HSV format)", 50, 0, 255)
gen.add("saturation_low", int_t, 0, "Lower limit for saturation selection in \
        backprojection filter (S channel in HSV format)", 0, 0, 255)
gen.add("saturation_high", int_t, 0, "Upper limit for saturation selection in \
        backprojection filter (S channel in HSV format)", 255, 0, 255)
gen.add("value_low", int_t, 0, "Lower limit for value selection in \
        backprojection filter (V channel in HSV format)", 0, 0, 255)
gen.add("value_high", int_t, 0, "Upper limit for value selection in \
        backprojection filter (V channel in HSV format)", 255, 0, 255)
gen.add("backprojection_threshold", int_t, 0, "Threshold to run on resulting \
        histogram backprojection (looking for grass)", 50, 0, 255)
gen.add("training_file_name", str_t, 0, "Name of file to use for \
        histogram backprojection training (looking for grass)",
        "training_for_backprojection_1.png")
gen.add("image_width", int_t, 0, "Width of image to shrink to (only if it's larger)",
        640, 20, 1920)
gen.add("image_height", int_t, 0, "Height of image to shrink to (only if it's larger)",
        480, 20, 1080)

# gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)

exit(gen.generate(PACKAGE, "line_detection", "LineDetection"))
